---

interface ButtonProps{
  title: string;
  design: "default" | "available" | "dark" | "outlined" | "social";
  type: "default" | "link" | "decoration";
  link?: string;
}

const {title, color, type, design, link} = Astro.props

// Animation
const defaultAnimationStyle = "transition-all ease-out duration-200"

// Default Button Style
const buttonDesignTypeDefault = "relative font-bold text-xs py-2 px-6 pr-4 rounded bg-snow-mist shadow-sm d-dot"
const beforeDefaultDot = " before:content-[''] before:absolute before:w-[10px] before:h-[10px] before:top-[calc(100%/2.4)] before:left-[0.7rem] before:rounded-full before:bg-slate-haze"

// Available Button Style
const buttonDesignTypeAvailable = "relative font-bold text-xs py-2 px-6 pr-4 bg-mint-breeze text-fern-shade rounded shadow-sm"
const beforeAvailableDot = " before:content-[''] before:absolute before:w-[10px] before:h-[10px] before:top-[calc(100%/2.4)] before:left-[0.7rem] before:rounded-full before:bg-emerald-glow before:animate-pulse"

// Dark Button Style
const buttonDesignTypeDark = "relative font-bold text-xs py-2 px-6 pr-4 bg-midnight-void text-white rounded shadow-sm h-fit border h-fit"
const beforeDarkDesign= " before:content-[''] before:absolute before:w-[10px] before:h-[10px] before:top-[calc(100%/2.4)] before:left-[0.7rem] before:rounded-full before:bg-white before:border before:animate-pulse"

// Outlined Button Style
const buttonDesignTypeOutlined= "relative font-bold text-xs py-2 px-6 bg-white text-midnight-void border rounded shadow-sm h-fit"

---
{ type === "decoration"  && design === "default" ? (
  <button class=`${buttonDesignTypeDefault} ${beforeDefaultDot}`>{title}</button>
) : null }

{ type === "decoration"  && design === "available" ? (
  <button class=`${buttonDesignTypeAvailable} ${beforeAvailableDot}`>{title}</button>
) : null }

{ type === "default" && design === "dark" ? (
  <button class=`${buttonDesignTypeDark} ${beforeDarkDesign}`>{title}</button>
) : null }

{ type === "link" && design === "dark" ? (
<a href={link} class=`${buttonDesignTypeDark} ${beforeDarkDesign} ${defaultAnimationStyle} hover:bg-white hover:text-midnight-void`>{title}</a>
) : null }

{ type === "default" && design === "outlined" ? (
<button class=`${buttonDesignTypeOutlined} ${defaultAnimationStyle} hover:bg-midnight-void hover:text-white cursor-pointer` id="btn-copy-email">{title}</button>
) : null }


<script>
  import { useNewEvent } from "../utils/customEvents.ts";
  
  function copyToClipboard(){
    try{
      const res = navigator.clipboard.writeText("eliuttth.dev@gmail.com");
      useNewEvent({action: "ActiveToast", event: { status: true }})
    }catch(err){
      console.log(err.message);
    }
  }
  const btnCopyElement = document.getElementById("btn-copy-email");
  btnCopyElement.addEventListener("click", copyToClipboard);


</script>
